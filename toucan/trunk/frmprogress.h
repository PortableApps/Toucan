/////////////////////////////////////////////////////////////////////////////
// Name:        frmprogress.h
// Purpose:     
// Author:      Steven Lamerton
// Modified by: 
// Created:     19/05/2007 21:02:05
// RCS-ID:      
// Copyright:   Copyright (C)  2006 Steven Lamerton
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 19/05/2007 21:02:05

#ifndef _FRMPROGRESS_H_
#define _FRMPROGRESS_H_

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma interface "frmprogress.h"
#endif

class MyPipedProcess;
WX_DEFINE_ARRAY_PTR(MyPipedProcess *, MyProcessesArray);

/*!
 * Includes
 */

////@begin includes
////@end includes
#include "wx/txtstrm.h"
#include "wx/process.h"


#include "toucan.h"

/*!
 * Forward declarations
 */

////@begin forward declarations
////@end forward declarations

/*!
 * Control identifiers
 */

////@begin control identifiers
#define ID_FRMPROGRESS 10036
#define ID_TEXTCTRL1 10054
#define SYMBOL_FRMPROGRESS_STYLE wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxMAXIMIZE_BOX|wxMINIMIZE_BOX
#define SYMBOL_FRMPROGRESS_TITLE _("Progress")
#define SYMBOL_FRMPROGRESS_IDNAME ID_FRMPROGRESS
#define SYMBOL_FRMPROGRESS_SIZE wxSize(400, 300)
#define SYMBOL_FRMPROGRESS_POSITION wxDefaultPosition
////@end control identifiers

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

/*!
 * frmProgress class declaration
 */

class frmProgress: public wxDialog
{    
    DECLARE_DYNAMIC_CLASS( frmProgress )
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    frmProgress();
    frmProgress( wxWindow* parent, wxWindowID id = SYMBOL_FRMPROGRESS_IDNAME, const wxString& caption = SYMBOL_FRMPROGRESS_TITLE, const wxPoint& pos = SYMBOL_FRMPROGRESS_POSITION, const wxSize& size = SYMBOL_FRMPROGRESS_SIZE, long style = SYMBOL_FRMPROGRESS_STYLE );

    /// Creation
    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_FRMPROGRESS_IDNAME, const wxString& caption = SYMBOL_FRMPROGRESS_TITLE, const wxPoint& pos = SYMBOL_FRMPROGRESS_POSITION, const wxSize& size = SYMBOL_FRMPROGRESS_SIZE, long style = SYMBOL_FRMPROGRESS_STYLE );

    /// Destructor
    ~frmProgress();

    /// Initialises member variables
    void Init();

    /// Creates the controls and sizers
    void CreateControls();

////@begin frmProgress event handler declarations

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK
    void OnOKClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_SAVE
    void OnSAVEClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_ABORT
    void OnABORTClick( wxCommandEvent& event );

////@end frmProgress event handler declarations

////\@begin frmProgress member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////\@end frmProgress member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

////@begin frmProgress member variables
    wxTextCtrl* m_Progress_Text;
    wxButton* m_OK;
    wxButton* m_Save;
    wxButton* m_Abort;
////@end frmProgress member variables
    void OnTimer(wxTimerEvent& event);
    void OnIdle(wxIdleEvent& event);
    void OnProcessTerminated(MyPipedProcess *process);
private:
    MyProcessesArray m_running;

    // the idle event wake up timer
    wxTimer m_timerIdleWakeUp;
    void AddAsyncProcess(MyPipedProcess *process)
    {
        if ( m_running.IsEmpty() )
        {
            // we want to start getting the timer events to ensure that a
            // steady stream of idle events comes in -- otherwise we
            // wouldn't be able to poll the child process input
            m_timerIdleWakeUp.Start(20);
        }
        //else: the timer is already running

        m_running.Add(process);
    }
    void RemoveAsyncProcess(MyPipedProcess *process)
    {
        m_running.Remove(process);
        if ( m_running.IsEmpty() )
        {
            // we don't need to get idle events all the time any more
            m_timerIdleWakeUp.Stop();
        }
    }
};
class MyProcess : public wxProcess
{
public:
    MyProcess(frmProgress *parent, const wxString& cmd)
        : wxProcess(parent), m_cmd(cmd)
    {
        m_parent = parent;
    }

    // instead of overriding this virtual function we might as well process the
    // event from it in the frame class - this might be more convenient in some
    // cases
    virtual void OnTerminate(int pid, int status);

protected:
    frmProgress *m_parent;
    wxString m_cmd;
};

// A specialization of MyProcess for redirecting the output
class MyPipedProcess : public MyProcess
{
public:
    MyPipedProcess(frmProgress *parent, const wxString& cmd)
        : MyProcess(parent, cmd)
        {
            Redirect();
        }

    virtual void OnTerminate(int pid, int status);

    virtual bool HasInput();
    
   //long GetPID(){return process->GetPID();}
};

void MyProcess::OnTerminate(int pid, int status)
{
    //wxLogStatus(m_parent, _T("Process %u ('%s') terminated with exit code %d."), pid, m_cmd.c_str(), status);
    // we're not needed any more
    delete this;
}
// ----------------------------------------------------------------------------
// MyPipedProcess
// ----------------------------------------------------------------------------
#include "basicops.h"
wxFFileOutputStream newoutput( stderr );
wxTextOutputStream newcout( newoutput );
bool MyPipedProcess::HasInput()
{
    bool hasInput = false;
   
    if ( IsInputAvailable() )
    {

        wxTextInputStream tis(*GetInputStream());
        // this assumes that the output is always line buffered
        wxString msg;
        msg = tis.ReadLine();
        //wxMessageBox(_("has input"));
        if(wxGetApp().GetBlVisible()){
            m_parent->m_Progress_Text->AppendText(msg + wxT("\n"));
            wxMilliSleep(50);
        }
        else{
           // wxMessageBox(_("Outputting"));
           newcout<<msg + wxT("\n");
        }
        hasInput = true;
    }

    if ( IsErrorAvailable() )
    {
        wxTextInputStream tis(*GetErrorStream());
        // this assumes that the output is always line buffered
        wxString msg;
        msg = tis.ReadLine();
        if(wxGetApp().GetBlVisible()){
            m_parent->m_Progress_Text->AppendText(msg + wxT("\n"));
            wxMilliSleep(50);
        }
        else{
            newcout<<msg + wxT("\n");
        }
        hasInput = true;
    }
    return hasInput;
}

void MyPipedProcess::OnTerminate(int pid, int status)
{
    // show the rest of the output
    while(HasInput())
        ;

    m_parent->OnProcessTerminated(this);

    //MyProcess::OnTerminate(pid, status);
    if(wxGetApp().GetStrAbort() == wxT("ABORT")){
        m_parent->m_Progress_Text->AppendText(_("Aborted...\n"));
    }
    m_parent->m_OK->Enable(true);
    m_parent->m_Save->Enable(true);
    m_parent->m_Abort->Enable(false);
    //wxMessageBox(_("Abort code"));

    if(!wxGetApp().GetBlVisible()){
        m_parent->EndModal(wxID_OK);
    }
}

void frmProgress::OnIdle(wxIdleEvent& event)
{    wxYield();
    
    size_t count = m_running.GetCount();
    for ( size_t n = 0; n < count; n++ )
    {
        if ( m_running[n]->HasInput() )
        {
            event.RequestMore();
        }
    }
}

void frmProgress::OnTimer(wxTimerEvent& WXUNUSED(event))
{
    wxYield();
    
    wxWakeUpIdle();
}

void frmProgress::OnProcessTerminated(MyPipedProcess *process)
{
    RemoveAsyncProcess(process);

}


#endif
    // _FRMPROGRESS_H_
