/////////////////////////////////////////////////////////////////////////////
// Name:        frmmain.cpp
// Purpose:
// Author:      Steven Lamerton
// Modified by:
// Created:     24/11/2006 14:30:59
// RCS-ID:
// Copyright:   Copyright (C)  2006 Steven Lamerton
// Licence:
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 24/11/2006 14:30:59

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "frmmain.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include "frmvariable.h"
#include "frmsave.h"
#include "frmopen.h"

#include "toucan.h"
#include "frmmain.h"
#include "secure.h"
#include "backup.h"
#include "sync.h"
#include "exclusions.h"
#include "remove-start.h"
#include "basicops.h"

#include <wx/dir.h>
#include <wx/fileconf.h>
#include <wx/textfile.h>
#include <wx/stdpaths.h>
#include <wx/aboutdlg.h>
#include <wx/display.h>
#include <wx/gdicmn.h>

////@begin XPM images
////@end XPM images

/*!
* frmMain type definition
*/

IMPLEMENT_DYNAMIC_CLASS( frmMain, wxDialog )

/*!
* frmMain event table definition
*/

BEGIN_EVENT_TABLE( frmMain, wxDialog )

////\@begin frmMain event table entries
EVT_CLOSE( frmMain::OnCloseWindow )

EVT_BUTTON( ID_BUTTON_SYNC1, frmMain::OnButtonSync1Click )

EVT_BUTTON( ID_BITMAPBUTTON_SYNC_ADDVAR1, frmMain::OnBitmapbuttonSyncAddvar1Click )

EVT_BUTTON( ID_BITMAPBUTTON_SYNC_SAVE, frmMain::OnBitmapbuttonSyncSaveClick )

EVT_BUTTON( ID_BITMAPBUTTON_SYNC_OPEN, frmMain::OnBitmapbuttonSyncOpenClick )

EVT_BUTTON( ID_BUTTON_SYNC2, frmMain::OnButtonSync2Click )

EVT_BUTTON( ID_BITMAPBUTTON_SYNC_ADDVAR2, frmMain::OnBitmapbuttonSyncAddvar2Click )

EVT_BUTTON( ID_BITMAPBUTTON_SYNC_ADDEX, frmMain::OnBitmapbuttonSyncAddexClick )

EVT_BUTTON( ID_BITMAPBUTTON_SYNC_REMOVEEX, frmMain::OnBitmapbuttonSyncRemoveexClick )

EVT_BUTTON( ID_BUTTON_SYNC, frmMain::OnButtonSyncClick )

EVT_BUTTON( ID_BUTTON_BACKUP1, frmMain::OnButtonBackup1Click )

EVT_BUTTON( ID_BITMAPBUTTON_BACKUP_ADDVAR1, frmMain::OnBitmapbuttonBackupAddvar1Click )

EVT_BUTTON( ID_BITMAPBUTTON_BACKUP_SAVE, frmMain::OnBitmapbuttonBackupSaveClick )

EVT_BUTTON( ID_BITMAPBUTTON_BACKUP_OPEN, frmMain::OnBitmapbuttonBackupOpenClick )

EVT_BUTTON( ID_BUTTON_BACKUP2, frmMain::OnButtonBackup2Click )

EVT_BUTTON( ID_BITMAPBUTTON_BACKUP_ADDVAR2, frmMain::OnBitmapbuttonBackupAddvar2Click )

EVT_RADIOBOX( ID_RADIOBOX_BACKUPTYPE, frmMain::OnRadioboxBackuptypeSelected )

EVT_BUTTON( ID_BITMAPBUTTON_BACKUPEXADD, frmMain::OnBitmapbuttonBackupexaddClick )

EVT_BUTTON( ID_BITMAPBUTTON_BACKUPEXREM, frmMain::OnBitmapbuttonBackupexremClick )

EVT_BUTTON( ID_BUTTON_BACKUP, frmMain::OnButtonBackupClick )

EVT_BUTTON( ID_BITMAPBUTTON_SECURE_ADD, frmMain::OnBitmapbuttonSecureAddClick )

EVT_BUTTON( ID_BITMAPBUTTON_SECURE_REMOVE, frmMain::OnBitmapbuttonSecureRemoveClick )

EVT_BUTTON( ID_BITMAPBUTTON_SECURE_SAVE, frmMain::OnBitmapbuttonSecureSaveClick )

EVT_BUTTON( ID_BITMAPBUTTON_SECURE_OPEN, frmMain::OnBitmapbuttonSecureOpenClick )

EVT_BUTTON( ID_BITMAPBUTTON_SECURE_MAKERELATIVE, frmMain::OnBitmapbuttonSecureMakerelativeClick )

EVT_BUTTON( ID_BITMAPBUTTON_SECURE_ADDVAR, frmMain::OnBitmapbuttonSecureAddvarClick )

EVT_BUTTON( ID_BUTTON_SECURE, frmMain::OnButtonSecureClick )

EVT_COMBOBOX( ID_COMBOBOX, frmMain::OnComboboxSelected )

EVT_BUTTON( ID_BITMAPBUTTON_PVADD, frmMain::OnBitmapbuttonPvaddClick )

EVT_BUTTON( ID_BITMAPBUTTON_PVREMOVE, frmMain::OnBitmapbuttonPvremoveClick )

EVT_LIST_ITEM_ACTIVATED( ID_LISTCTRL, frmMain::OnListctrlItemActivated )

EVT_BUTTON( ID_BITMAPBUTTON_PVADDLIST, frmMain::OnBitmapbuttonPvaddlistClick )

EVT_BUTTON( ID_BITMAPBUTTON_PVREMOVELIST, frmMain::OnBitmapbuttonPvremovelistClick )

EVT_BUTTON( wxID_ABOUT, frmMain::OnABOUTClick )

EVT_BUTTON( wxID_HELP, frmMain::OnHELPClick )
////\@end frmMain event table entries

END_EVENT_TABLE()

/*!
* frmMain constructors
*/

frmMain::frmMain( )
{}

frmMain::frmMain( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{	Create(parent, id, caption, pos, size, style);
}/*!
* frmMain creator
*/

bool frmMain::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{	////@begin frmMain member initialisation
	m_Sync_First = NULL;
	m_Sync_Second = NULL;
	m_Sync_Function = NULL;
	m_sync_listex = NULL;
	m_BackupText1 = NULL;
	m_Backup1 = NULL;
	m_BackupText2 = NULL;
	m_Backup2 = NULL;
	m_BackupType = NULL;
	m_BackupFormat = NULL;
	m_BackupRatio = NULL;
	m_GenericBox = NULL;
	m_ListSecure = NULL;
	m_FunctionSecure = NULL;
	m_Pass = NULL;
	m_RePass = NULL;
	m_PVCombo = NULL;
	m_List = NULL;
	////@end frmMain member initialisation
    m_Attribs = NULL;

	////\@begin frmMain creation
	SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
	wxDialog::Create( parent, id, caption, pos, size, style );

	CreateControls();
	SetIcon(GetIconResource(wxT("toucan.ico")));
	Centre();
	////\@end frmMain creation
	return true;
}/*!
* Control creation for frmMain
*/

void frmMain::CreateControls()
{   if(wxFileExists(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxFILE_SEP_PATH + wxT("Data") + wxFILE_SEP_PATH + wxT("fr") + wxFILE_SEP_PATH + wxT("toucan.mo")))
	{
		//Load language if one exists from toucan.h
		wxGetApp().SelectLanguage(wxLANGUAGE_FRENCH);
	}
	////\@begin frmMain content construction
	// Generated by DialogBlocks, 31/01/2007 16:50:45 (Personal Edition)
	wxFileConfig *programconfig = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Settings.ini") );
	wxFileConfig::Set( programconfig );
	wxString strTabStyle;
	programconfig->Read(wxT("General/Tabstyle"), &strTabStyle, _("Icons"));
	frmMain* itemDialog1 = this;

	wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
	itemDialog1->SetSizer(itemBoxSizer2);

	wxNotebook* itemNotebook3 = new wxNotebook( itemDialog1, ID_NOTEBOOK1, wxDefaultPosition, wxDefaultSize, wxNB_TOP);
	wxImageList* itemNotebook3ImageList = new wxImageList(48, 48, false, 5);
	{
		//Add all icons, however if the platform is less than 32 they do not get added in the page creation code.
		wxIcon syncicon(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\App\\bitmaps\\view-refresh.png"), wxBITMAP_TYPE_PNG);
		itemNotebook3ImageList->Add(syncicon);
		wxIcon backupicon(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\App\\bitmaps\\package-x-generic.png"), wxBITMAP_TYPE_PNG);
		itemNotebook3ImageList->Add(backupicon);
		wxIcon secureicon(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\App\\bitmaps\\system-lock-screen.png"), wxBITMAP_TYPE_PNG);
		itemNotebook3ImageList->Add(secureicon);
		wxIcon pvaricon(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\App\\bitmaps\\drive-removable-media-48.png"), wxBITMAP_TYPE_PNG);
		itemNotebook3ImageList->Add(pvaricon);
		wxIcon optionsicon(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\App\\bitmaps\\preferences-desktop.png"), wxBITMAP_TYPE_PNG);
		itemNotebook3ImageList->Add(optionsicon);
	}
	itemNotebook3->AssignImageList(itemNotebook3ImageList);

	wxPanel* itemPanel4 = new wxPanel( itemNotebook3, ID_PANEL_SYNC, wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxTAB_TRAVERSAL );
	wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxVERTICAL);
	itemPanel4->SetSizer(itemBoxSizer5);

	wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer5->Add(itemBoxSizer6, 0, wxALIGN_LEFT|wxALL, 5);
	wxStaticText* itemStaticText7 = new wxStaticText( itemPanel4, wxID_STATIC, _("Source"), wxDefaultPosition, wxSize(100, -1), 0 );
	itemBoxSizer6->Add(itemStaticText7, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

	m_Sync_First = new wxTextCtrl( itemPanel4, ID_TEXTCTRL_SYNC_FIRST, _T(""), wxDefaultPosition, wxSize(300, -1), 0 );
	itemBoxSizer6->Add(m_Sync_First, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxButton* itemButton9 = new wxButton( itemPanel4, ID_BUTTON_SYNC1, wxT("..."), wxDefaultPosition, wxSize(25, -1), 0 );
	itemBoxSizer6->Add(itemButton9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton10Bitmap(itemDialog1->GetBitmapResource(wxT("test2.png")));
	wxBitmapButton* itemBitmapButton10 = new wxBitmapButton( itemPanel4, ID_BITMAPBUTTON_SYNC_ADDVAR1, itemBitmapButton10Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );

	itemBoxSizer6->Add(itemBitmapButton10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer5->Add(itemBoxSizer11, 0, wxALIGN_LEFT|wxALL, 0);
	itemBoxSizer11->Add(110, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton13Bitmap(itemDialog1->GetBitmapResource(wxT("media-floppy.png")));
	wxBitmapButton* itemBitmapButton13 = new wxBitmapButton( itemPanel4, ID_BITMAPBUTTON_SYNC_SAVE, itemBitmapButton13Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer11->Add(itemBitmapButton13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBitmap itemBitmapButton14Bitmap(itemDialog1->GetBitmapResource(wxT("folder.png")));
	wxBitmapButton* itemBitmapButton14 = new wxBitmapButton( itemPanel4, ID_BITMAPBUTTON_SYNC_OPEN, itemBitmapButton14Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer11->Add(itemBitmapButton14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer5->Add(itemBoxSizer15, 0, wxALIGN_LEFT|wxALL, 5);
	wxStaticText* itemStaticText16 = new wxStaticText( itemPanel4, wxID_STATIC, _("Destination"), wxDefaultPosition, wxSize(100, -1), 0 );
	itemBoxSizer15->Add(itemStaticText16, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

	m_Sync_Second = new wxTextCtrl( itemPanel4, ID_TEXTCTRL_SYNC_SECOND, _T(""), wxDefaultPosition, wxSize(300, -1), 0 );
	itemBoxSizer15->Add(m_Sync_Second, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxButton* itemButton18 = new wxButton( itemPanel4, ID_BUTTON_SYNC2, wxT("..."), wxDefaultPosition, wxSize(25, -1), 0 );
	itemBoxSizer15->Add(itemButton18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton19Bitmap(itemDialog1->GetBitmapResource(wxT("test2.png")));
	wxBitmapButton* itemBitmapButton19 = new wxBitmapButton( itemPanel4, ID_BITMAPBUTTON_SYNC_ADDVAR2, itemBitmapButton19Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer15->Add(itemBitmapButton19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer20 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer5->Add(itemBoxSizer20, 0, wxALIGN_LEFT|wxALL, 5);
	wxBoxSizer* itemBoxSizer21 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer20->Add(itemBoxSizer21, 0, wxALIGN_TOP|wxALL, 5);
	wxString m_Sync_FunctionStrings[] = {
		_("Copy"),
		_("Update"),
		_("Mirror"),
		_("Equalise")
	};
	m_Sync_Function = new wxRadioBox( itemPanel4, ID_RADIOBOX1, _("Function"), wxDefaultPosition, wxDefaultSize, 4, m_Sync_FunctionStrings, 2, wxRA_SPECIFY_ROWS );
	m_Sync_Function->SetSelection(0);
	itemBoxSizer21->Add(m_Sync_Function, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    
    wxBoxSizer* itemBoxSizer199 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer20->Add(itemBoxSizer199, 0, wxALIGN_TOP|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer24Static = new wxStaticBox(itemPanel4, wxID_ANY, _("Others"));
    wxStaticBoxSizer* itemStaticBoxSizer24 = new wxStaticBoxSizer(itemStaticBoxSizer24Static, wxVERTICAL);
    itemBoxSizer199->Add(itemStaticBoxSizer24, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    
    
    m_Attribs = new wxCheckBox( itemPanel4, ID_CHECKBOX1, _("Retain Attributes"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
    m_Attribs->SetValue(false);
    itemStaticBoxSizer24->Add(m_Attribs, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer23 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer5->Add(itemBoxSizer23, 0, wxALIGN_LEFT|wxALL, 5);
	wxBoxSizer* itemBoxSizer24 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer23->Add(itemBoxSizer24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxStaticText* itemStaticText25 = new wxStaticText( itemPanel4, wxID_STATIC, _("Folders + Extensions to Exclude"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer24->Add(itemStaticText25, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

	wxBoxSizer* itemBoxSizer26 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer24->Add(itemBoxSizer26, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
	wxString* m_sync_listexStrings = NULL;
	m_sync_listex = new wxListBox( itemPanel4, ID_LISTBOX2, wxDefaultPosition, wxSize(450, 125), 0, m_sync_listexStrings, wxLB_SINGLE );
	itemBoxSizer26->Add(m_sync_listex, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer28 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer26->Add(itemBoxSizer28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxBitmap itemBitmapButton29Bitmap(itemDialog1->GetBitmapResource(wxT("list-add.png")));
	wxBitmapButton* itemBitmapButton29 = new wxBitmapButton( itemPanel4, ID_BITMAPBUTTON_SYNC_ADDEX, itemBitmapButton29Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer28->Add(itemBitmapButton29, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton30Bitmap(itemDialog1->GetBitmapResource(wxT("list-remove.png")));
	wxBitmapButton* itemBitmapButton30 = new wxBitmapButton( itemPanel4, ID_BITMAPBUTTON_SYNC_REMOVEEX, itemBitmapButton30Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer28->Add(itemBitmapButton30, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer31 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer5->Add(itemBoxSizer31, 0, wxALIGN_LEFT|wxALL, 5);
	wxButton* itemButton32 = new wxButton( itemPanel4, ID_BUTTON_SYNC, _("Go"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer31->Add(itemButton32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	if(strTabStyle == _("Text"))
	{
		itemNotebook3->AddPage(itemPanel4, _T("Sync"), false);
	}
	else if(strTabStyle == _("Icons + Text"))
	{
		itemNotebook3->AddPage(itemPanel4, _T("Sync"), false, 0);
	}
	else
	{
		itemNotebook3->AddPage(itemPanel4, _T(""), false, 0);  
	}

	wxPanel* itemPanel33 = new wxPanel( itemNotebook3, ID_PANEL_BACKUP, wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxTAB_TRAVERSAL );
	wxBoxSizer* itemBoxSizer34 = new wxBoxSizer(wxVERTICAL);
	itemPanel33->SetSizer(itemBoxSizer34);

	wxBoxSizer* itemBoxSizer35 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer34->Add(itemBoxSizer35, 0, wxALIGN_LEFT|wxALL, 5);
	m_BackupText1 = new wxStaticText( itemPanel33, wxID_STATIC_1, _("Source Folder"), wxDefaultPosition, wxSize(100, -1), 0 );
	itemBoxSizer35->Add(m_BackupText1, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

	m_Backup1 = new wxTextCtrl( itemPanel33, ID_TEXTCTRL_BACKUP1, _T(""), wxDefaultPosition, wxSize(300, -1), 0 );
	itemBoxSizer35->Add(m_Backup1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxButton* itemButton38 = new wxButton( itemPanel33, ID_BUTTON_BACKUP1, wxT("..."), wxDefaultPosition, wxSize(25, -1), 0 );
	itemBoxSizer35->Add(itemButton38, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton39Bitmap(itemDialog1->GetBitmapResource(wxT("test2.png")));
	wxBitmapButton* itemBitmapButton39 = new wxBitmapButton( itemPanel33, ID_BITMAPBUTTON_BACKUP_ADDVAR1, itemBitmapButton39Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer35->Add(itemBitmapButton39, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer40 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer34->Add(itemBoxSizer40, 0, wxALIGN_LEFT|wxALL, 0);
	itemBoxSizer40->Add(110, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton42Bitmap(itemDialog1->GetBitmapResource(wxT("media-floppy.png")));
	wxBitmapButton* itemBitmapButton42 = new wxBitmapButton( itemPanel33, ID_BITMAPBUTTON_BACKUP_SAVE, itemBitmapButton42Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer40->Add(itemBitmapButton42, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBitmap itemBitmapButton43Bitmap(itemDialog1->GetBitmapResource(wxT("folder.png")));
	wxBitmapButton* itemBitmapButton43 = new wxBitmapButton( itemPanel33, ID_BITMAPBUTTON_BACKUP_OPEN, itemBitmapButton43Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer40->Add(itemBitmapButton43, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer44 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer34->Add(itemBoxSizer44, 0, wxALIGN_LEFT|wxALL, 5);
	m_BackupText2 = new wxStaticText( itemPanel33, wxID_STATIC_2, _("Backup File"), wxDefaultPosition, wxSize(100, -1), 0 );
	itemBoxSizer44->Add(m_BackupText2, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

	m_Backup2 = new wxTextCtrl( itemPanel33, ID_TEXTCTRL_BACKUP2, _T(""), wxDefaultPosition, wxSize(300, -1), 0 );
	itemBoxSizer44->Add(m_Backup2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxButton* itemButton47 = new wxButton( itemPanel33, ID_BUTTON_BACKUP2, wxT("..."), wxDefaultPosition, wxSize(25, -1), 0 );
	itemBoxSizer44->Add(itemButton47, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton48Bitmap(itemDialog1->GetBitmapResource(wxT("test2.png")));
	wxBitmapButton* itemBitmapButton48 = new wxBitmapButton( itemPanel33, ID_BITMAPBUTTON_BACKUP_ADDVAR2, itemBitmapButton48Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer44->Add(itemBitmapButton48, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer49 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer34->Add(itemBoxSizer49, 0, wxALIGN_LEFT|wxALL, 5);
	wxBoxSizer* itemBoxSizer50 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer49->Add(itemBoxSizer50, 0, wxALIGN_TOP|wxALL, 5);
	wxString m_BackupTypeStrings[] = {
		_("Complete"),
		_("Update"),
		_("Restore")
	};
	m_BackupType = new wxRadioBox( itemPanel33, ID_RADIOBOX_BACKUPTYPE, _("Backup Type"), wxDefaultPosition, wxDefaultSize, 3, m_BackupTypeStrings, 2, wxRA_SPECIFY_ROWS );
	m_BackupType->SetSelection(0);
	itemBoxSizer50->Add(m_BackupType, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer52 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer49->Add(itemBoxSizer52, 0, wxALIGN_TOP|wxALL, 5);
	wxString m_BackupFormatStrings[] = {
		wxT("7 Zip"),
		wxT("Zip")
	};
	m_BackupFormat = new wxRadioBox( itemPanel33, ID_RADIOBOX3, _("Backup Format"), wxDefaultPosition, wxDefaultSize, 2, m_BackupFormatStrings, 2, wxRA_SPECIFY_ROWS );
	m_BackupFormat->SetSelection(0);
	itemBoxSizer52->Add(m_BackupFormat, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer54 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer49->Add(itemBoxSizer54, 0, wxALIGN_TOP|wxALL, 5);
	wxString m_BackupRatioStrings[] = {
		_("Normal"),
		_("Maximum")
	};
	m_BackupRatio = new wxRadioBox( itemPanel33, ID_RADIOBOX4, _("Compression Ratio"), wxDefaultPosition, wxDefaultSize, 2, m_BackupRatioStrings, 2, wxRA_SPECIFY_ROWS );
	m_BackupRatio->SetSelection(0);
	itemBoxSizer54->Add(m_BackupRatio, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer56 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer34->Add(itemBoxSizer56, 0, wxALIGN_LEFT|wxALL, 5);
	wxBoxSizer* itemBoxSizer57 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer56->Add(itemBoxSizer57, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxStaticText* itemStaticText58 = new wxStaticText( itemPanel33, wxID_STATIC, _("Folders + Extensions to Exclude"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer57->Add(itemStaticText58, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

	wxBoxSizer* itemBoxSizer59 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer57->Add(itemBoxSizer59, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
	wxString* m_backup_listexStrings = NULL;
	m_backup_listex = new wxListBox( itemPanel33, ID_LISTBOX, wxDefaultPosition, wxSize(450, 125), 0, m_backup_listexStrings, wxLB_SINGLE );
	itemBoxSizer59->Add(m_backup_listex, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

	wxBoxSizer* itemBoxSizer61 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer59->Add(itemBoxSizer61, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxBitmap itemBitmapButton62Bitmap(itemDialog1->GetBitmapResource(wxT("list-add.png")));
	wxBitmapButton* itemBitmapButton62 = new wxBitmapButton( itemPanel33, ID_BITMAPBUTTON_BACKUPEXADD, itemBitmapButton62Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer61->Add(itemBitmapButton62, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton63Bitmap(itemDialog1->GetBitmapResource(wxT("list-remove.png")));
	wxBitmapButton* itemBitmapButton63 = new wxBitmapButton( itemPanel33, ID_BITMAPBUTTON_BACKUPEXREM, itemBitmapButton63Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer61->Add(itemBitmapButton63, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer64 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer34->Add(itemBoxSizer64, 0, wxALIGN_LEFT|wxALL, 5);
	wxButton* itemButton65 = new wxButton( itemPanel33, ID_BUTTON_BACKUP, _("Go"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer64->Add(itemButton65, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	if(strTabStyle == _("Text"))
	{
		itemNotebook3->AddPage(itemPanel33, _T("Backup"), false);   
	}
	else if(strTabStyle == _("Icons + Text"))
	{
		itemNotebook3->AddPage(itemPanel33, _T("Backup"), false, 1);
	}
	else
	{
		itemNotebook3->AddPage(itemPanel33, _T(""), false, 1);
	}
	
	wxPanel* itemPanel66 = new wxPanel( itemNotebook3, ID_PANEL_SECURE, wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxTAB_TRAVERSAL );
	wxBoxSizer* itemBoxSizer67 = new wxBoxSizer(wxVERTICAL);
	itemPanel66->SetSizer(itemBoxSizer67);

	wxBoxSizer* itemBoxSizer68 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer67->Add(itemBoxSizer68, 0, wxALIGN_LEFT|wxALL, 5);
	m_GenericBox = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer68->Add(m_GenericBox, 0, wxALIGN_TOP|wxALL, 5);

	wxBoxSizer* itemBoxSizer70 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer68->Add(itemBoxSizer70, 0, wxALIGN_TOP|wxALL, 5);
	wxBitmap itemBitmapButton71Bitmap(itemDialog1->GetBitmapResource(wxT("list-add.png")));
	wxBitmapButton* itemBitmapButton71 = new wxBitmapButton( itemPanel66, ID_BITMAPBUTTON_SECURE_ADD, itemBitmapButton71Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer70->Add(itemBitmapButton71, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton72Bitmap(itemDialog1->GetBitmapResource(wxT("list-remove.png")));
	wxBitmapButton* itemBitmapButton72 = new wxBitmapButton( itemPanel66, ID_BITMAPBUTTON_SECURE_REMOVE, itemBitmapButton72Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer70->Add(itemBitmapButton72, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton73Bitmap(itemDialog1->GetBitmapResource(wxT("media-floppy.png")));
	wxBitmapButton* itemBitmapButton73 = new wxBitmapButton( itemPanel66, ID_BITMAPBUTTON_SECURE_SAVE, itemBitmapButton73Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer70->Add(itemBitmapButton73, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton74Bitmap(itemDialog1->GetBitmapResource(wxT("folder.png")));
	wxBitmapButton* itemBitmapButton74 = new wxBitmapButton( itemPanel66, ID_BITMAPBUTTON_SECURE_OPEN, itemBitmapButton74Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer70->Add(itemBitmapButton74, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton75Bitmap(itemDialog1->GetBitmapResource(wxT("drive-removable-media.png")));
	wxBitmapButton* itemBitmapButton75 = new wxBitmapButton( itemPanel66, ID_BITMAPBUTTON_SECURE_MAKERELATIVE, itemBitmapButton75Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer70->Add(itemBitmapButton75, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton76Bitmap(itemDialog1->GetBitmapResource(wxT("test2.png")));
	wxBitmapButton* itemBitmapButton76 = new wxBitmapButton( itemPanel66, ID_BITMAPBUTTON_SECURE_ADDVAR, itemBitmapButton76Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer70->Add(itemBitmapButton76, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer77 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer68->Add(itemBoxSizer77, 0, wxALIGN_TOP|wxALL, 5);
	wxString* m_ListSecureStrings = NULL;
	m_ListSecure = new wxListBox( itemPanel66, ID_LISTBOX1, wxDefaultPosition, wxSize(200, 200), 0, m_ListSecureStrings, wxLB_MULTIPLE|wxLB_HSCROLL );
	itemBoxSizer77->Add(m_ListSecure, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxString m_FunctionSecureStrings[] = {
		_("Encrypt"),
		_("Decrypt")
	};
	m_FunctionSecure = new wxRadioBox( itemPanel66, ID_RADIOBOX5, _("Function"), wxDefaultPosition, wxDefaultSize, 2, m_FunctionSecureStrings, 1, wxRA_SPECIFY_ROWS );
	m_FunctionSecure->SetSelection(0);
	itemBoxSizer77->Add(m_FunctionSecure, 0, wxALIGN_LEFT|wxALL, 5);

	wxStaticText* itemStaticText80 = new wxStaticText( itemPanel66, wxID_STATIC, _("Password"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer77->Add(itemStaticText80, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

	m_Pass = new wxTextCtrl( itemPanel66, ID_TEXTCTRL5, _T(""), wxDefaultPosition, wxSize(200, -1), wxTE_PASSWORD );
	itemBoxSizer77->Add(m_Pass, 0, wxALIGN_LEFT|wxALL, 5);

	wxStaticText* itemStaticText82 = new wxStaticText( itemPanel66, wxID_STATIC, _("Re-enter Password"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer77->Add(itemStaticText82, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

	m_RePass = new wxTextCtrl( itemPanel66, ID_TEXTCTRL6, _T(""), wxDefaultPosition, wxSize(200, -1), wxTE_PASSWORD );
	itemBoxSizer77->Add(m_RePass, 0, wxALIGN_LEFT|wxALL, 5);

	wxButton* itemButton84 = new wxButton( itemPanel66, ID_BUTTON_SECURE, _("Go"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer77->Add(itemButton84, 0, wxALIGN_LEFT|wxALL, 5);

	if(strTabStyle == _("Text"))
	{
		itemNotebook3->AddPage(itemPanel66, _T("Secure"), false);   
	}
	else if(strTabStyle == _("Icons + Text"))
	{    
		itemNotebook3->AddPage(itemPanel66, _T("Secure"), false, 2);
	}
	else
	{    
		itemNotebook3->AddPage(itemPanel66, _T(""), false, 2);
	}  
	

	wxPanel* itemPanel85 = new wxPanel( itemNotebook3, ID_PANEL_PV, wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxTAB_TRAVERSAL );
	wxBoxSizer* itemBoxSizer86 = new wxBoxSizer(wxVERTICAL);
	itemPanel85->SetSizer(itemBoxSizer86);

	wxBoxSizer* itemBoxSizer87 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer86->Add(itemBoxSizer87, 0, wxALIGN_LEFT|wxALL, 5);
	wxString* m_PVComboStrings = NULL;
	m_PVCombo = new wxComboBox( itemPanel85, ID_COMBOBOX, _T(""), wxDefaultPosition, wxSize(200, -1), 0, m_PVComboStrings, wxCB_DROPDOWN );
	itemBoxSizer87->Add(m_PVCombo, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton89Bitmap(itemDialog1->GetBitmapResource(wxT("list-add.png")));
	wxBitmapButton* itemBitmapButton89 = new wxBitmapButton( itemPanel85, ID_BITMAPBUTTON_PVADD, itemBitmapButton89Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer87->Add(itemBitmapButton89, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBitmap itemBitmapButton90Bitmap(itemDialog1->GetBitmapResource(wxT("list-remove.png")));
	wxBitmapButton* itemBitmapButton90 = new wxBitmapButton( itemPanel85, ID_BITMAPBUTTON_PVREMOVE, itemBitmapButton90Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer87->Add(itemBitmapButton90, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxBoxSizer* itemBoxSizer91 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer86->Add(itemBoxSizer91, 0, wxALIGN_LEFT|wxALL, 5);
	wxBoxSizer* itemBoxSizer92 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer91->Add(itemBoxSizer92, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);
	m_List = new wxListCtrl( itemPanel85, ID_LISTCTRL, wxDefaultPosition, wxSize(400, 300), wxLC_REPORT|wxLC_SINGLE_SEL );
	itemBoxSizer92->Add(m_List, 0, wxALIGN_LEFT|wxALL, 5);

	wxBoxSizer* itemBoxSizer94 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer91->Add(itemBoxSizer94, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxBitmap itemBitmapButton95Bitmap(itemDialog1->GetBitmapResource(wxT("list-add.png")));
	wxBitmapButton* itemBitmapButton95 = new wxBitmapButton( itemPanel85, ID_BITMAPBUTTON_PVADDLIST, itemBitmapButton95Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer94->Add(itemBitmapButton95, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	wxBitmap itemBitmapButton96Bitmap(itemDialog1->GetBitmapResource(wxT("list-remove.png")));
	wxBitmapButton* itemBitmapButton96 = new wxBitmapButton( itemPanel85, ID_BITMAPBUTTON_PVREMOVELIST, itemBitmapButton96Bitmap, wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW|wxBU_EXACTFIT );
	itemBoxSizer94->Add(itemBitmapButton96, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

	if(strTabStyle == _("Text"))
	{
		itemNotebook3->AddPage(itemPanel85, _("Portable Variables"), false);   
	}
	else if (strTabStyle == _("Icons + Text"))
	{
		itemNotebook3->AddPage(itemPanel85, _("Portable Variables"), false, 3);
	}
	else
	{
		itemNotebook3->AddPage(itemPanel85, _T(""), false, 3);
	}

	wxPanel* itemPanel97 = new wxPanel( itemNotebook3, ID_PANEL_OTHER, wxDefaultPosition, wxDefaultSize, wxNO_BORDER|wxTAB_TRAVERSAL );
	wxBoxSizer* itemBoxSizer98 = new wxBoxSizer(wxVERTICAL);
	itemPanel97->SetSizer(itemBoxSizer98);

	wxBoxSizer* itemBoxSizer99 = new wxBoxSizer(wxVERTICAL);
	itemBoxSizer98->Add(itemBoxSizer99, 0, wxALIGN_LEFT|wxALL, 5);
	//	m_Tooltip = new wxCheckBox( itemPanel97, ID_TOOLTIP, _("Enable Tooltips?"), wxDefaultPosition, wxDefaultSize, 0 );
	//itemBoxSizer99->Add(m_Tooltip, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxButton* itemButton100 = new wxButton( itemPanel97, wxID_ABOUT, _("About"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer99->Add(itemButton100, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxButton* itemButton101 = new wxButton( itemPanel97, wxID_HELP, _("Help"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer99->Add(itemButton101, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxString m_TooltipStrings[] = {
		_("Enabled"),
		_("Disabled")
	};
	m_Tooltip = new wxRadioBox (itemPanel97, ID_TOOLTIP, _("Tooltips (Requires Restart)"), wxDefaultPosition, wxDefaultSize,2,  m_TooltipStrings,2 ,wxRA_SPECIFY_ROWS);
	itemBoxSizer99->Add(m_Tooltip, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	wxString m_TabStyleStrings[] = {
		_("Icons"),
		_("Text"),
		_("Icons + Text")
	};
	m_TabStyle = new wxRadioBox (itemPanel97, ID_TABSTYLE, _("Tab Style (Requires Restart)"), wxDefaultPosition, wxDefaultSize,3,  m_TabStyleStrings,3 ,wxRA_SPECIFY_ROWS);
	itemBoxSizer99->Add(m_TabStyle, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
	//Button code for help button when I can get it to work

	if(strTabStyle == _("Text"))
	{
		itemNotebook3->AddPage(itemPanel97, _T("Other"), false);   
	}
	else if(strTabStyle == _("Icons + Text"))
	{
		itemNotebook3->AddPage(itemPanel97, _T("Other"), false, 4);
	}
	else
	{
		itemNotebook3->AddPage(itemPanel97, _T(""), false, 4);
	}
	

	itemBoxSizer2->Add(itemNotebook3, 1, wxGROW|wxALL, 5);

	////\@end frmMain content construction

	
	m_Tree = new wxGenericDirCtrl( itemPanel66, ID_TREECTRL1, wxDirDialogDefaultFolderStr, wxDefaultPosition, wxSize(200, 400), wxTR_HAS_BUTTONS |wxTR_LINES_AT_ROOT|wxTR_SINGLE );
	m_GenericBox->Add(m_Tree, 0, wxALIGN_LEFT|wxALL, 5);
	//Resize to made sure all the contents become properly aligned
	itemDialog1->SetSize(-1,-1,661,485);
	itemDialog1->SetSize(-1,-1,660,540);
	//Add columns to portable variable list control
	wxListItem column;
	m_List->InsertColumn(0, column);
	m_List->InsertColumn(1, column);
	//Load the portable variables into the list controls
	wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini") );
	wxFileConfig::Set( config );
	wxString str;
	long dummy;
	bool bCont = config->GetFirstGroup(str, dummy);
	while ( bCont )
	{
		m_PVCombo->Append(str);
		bCont = config->GetNextGroup(str, dummy);
	}
	m_TabStyle->SetStringSelection(strTabStyle);
	wxString strTooltip;
	programconfig->Read(wxT("General/Tooltip"), &strTooltip);
	if(strTooltip == _("Disabled"))
	{
		m_Tooltip->SetStringSelection(strTooltip);
	}
	else
	{
		m_Tooltip->SetStringSelection(strTooltip);
		//Sync tooltips
		itemBitmapButton10->SetToolTip(_("Add portable variable"));
		itemBitmapButton13->SetToolTip(_("Save your settings"));
		itemBitmapButton14->SetToolTip(_("Load your settings"));
		itemBitmapButton19->SetToolTip(_("Add portable variable"));
		itemBitmapButton29->SetToolTip(_("Add an exclusion"));
		itemBitmapButton30->SetToolTip(_("Remove the exclusion"));
		
		//Backup tooltips
		
		itemBitmapButton39->SetToolTip(_("Add portable variable"));
		itemBitmapButton42->SetToolTip(_("Save your settings"));
		itemBitmapButton43->SetToolTip(_("Load your settings"));
		itemBitmapButton48->SetToolTip(_("Add portable variable"));
		itemBitmapButton62->SetToolTip(_("Add an exclusion"));
		itemBitmapButton63->SetToolTip(_("Remove the exclusion"));
		
		//Secure tooltips
		itemBitmapButton71->SetToolTip(_("Add file/folder"));
		itemBitmapButton72->SetToolTip(_("Remove file/folder"));
		itemBitmapButton73->SetToolTip(_("Save your settings"));
		itemBitmapButton74->SetToolTip(_("Load your settings"));
		itemBitmapButton75->SetToolTip(_("Make relative to @drive@"));
		itemBitmapButton76->SetToolTip(_("Add portable variable"));
		
		//Portable variable tooltips
		itemBitmapButton89->SetToolTip(_("Add a portable variable"));
		itemBitmapButton90->SetToolTip(_("Remove a portable variable"));
		itemBitmapButton95->SetToolTip(_("Add a location"));
		itemBitmapButton96->SetToolTip(_("Remove a location"));
		
	}  
	int height;
	programconfig->Read(wxT("General/Height"), &height, 0);
	if(height == 0)
	{
		height = 540;
	}
	int width;
	programconfig->Read(wxT("General/Width"), &width, 0);
	if(width == 0)
	{
		//wxMessageBox(_("Error"));
		width = 660;
	}
	itemDialog1->SetSize(width, height);
}  

/*!
* Should we show tooltips?
*/

bool frmMain::ShowToolTips()
{	return true;
}/*!
* Get bitmap resources
*/

wxBitmap frmMain::GetBitmapResource( const wxString& name )
{	// Bitmap retrieval
	////\@begin frmMain bitmap retrieval
	wxUnusedVar(name);
	if (name == _T("test2.png"))
	{
		wxBitmap bitmap(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) +_T("\\App\\bitmaps\\test2.png"), wxBITMAP_TYPE_PNG);
		return bitmap;
	}
	else if (name == _T("media-floppy.png"))
	{
		wxBitmap bitmap(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) +_T("\\App\\bitmaps\\media-floppy.png"), wxBITMAP_TYPE_PNG);
		return bitmap;
	}
	else if (name == _T("folder.png"))
	{
		wxBitmap bitmap(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) +_T("\\App\\bitmaps\\folder.png"), wxBITMAP_TYPE_PNG);
		return bitmap;
	}
	else if (name == _T("list-add.png"))
	{
		wxBitmap bitmap(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) +_T("\\App\\bitmaps\\list-add.png"), wxBITMAP_TYPE_PNG);
		return bitmap;
	}
	else if (name == _T("list-remove.png"))
	{
		wxBitmap bitmap(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) +_T("\\App\\bitmaps\\list-remove.png"), wxBITMAP_TYPE_PNG);
		return bitmap;
	}
	else if (name == _T("drive-removable-media.png"))
	{
		wxBitmap bitmap(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) +_T("\\App\\bitmaps\\drive-removable-media.png"), wxBITMAP_TYPE_PNG);
		return bitmap;
	}
	return wxNullBitmap;
	////\@end frmMain bitmap retrieval
}/*!
* Get icon resources
*/

wxIcon frmMain::GetIconResource( const wxString& name )
{	// Icon retrieval
	////\@begin frmMain icon retrieval
	wxUnusedVar(name);
	if (name == _T("toucan.ico"))
	{
		wxIcon icon(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + _T("\\App\\bitmaps\\Toucan.ico"), wxBITMAP_TYPE_ICO);
		return icon;
	}
	return wxNullIcon;
	////\@end frmMain icon retrieval
}/*!
* wxEVT_CLOSE_WINDOW event handler for ID_FRMINSERT
*/

void frmMain::OnCloseWindow( wxCloseEvent& event )
{	
	wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Settings.ini") );
	wxFileConfig::Set( config );
	config->Write(wxT("General/Tabstyle") , m_TabStyle->GetStringSelection());
	config->Write(wxT("General/Tooltip") , m_Tooltip->GetStringSelection());
	config->Flush();
	////@begin wxEVT_CLOSE_WINDOW event handler for ID_FRMINSERT in frmMain.
	// Before editing this code, remove the block markers.
	wxDialog* dialog = wxDynamicCast(this, wxDialog);
	dialog->EndModal(ID_FRMINSERT);
	////@end wxEVT_CLOSE_WINDOW event handler for ID_FRMINSERT in frmMain.
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_ABOUT
*/

void frmMain::OnABOUTClick( wxCommandEvent& event )
{	
	wxAboutDialogInfo info;
	info.SetName(wxT("Toucan"));
	info.SetVersion(wxT("1.0.0 Prerelease 2"));
	info.SetCopyright(wxT("(C) 2006-2007 Steven Lamerton \nName by Danny Mensingh"));
	info.SetWebSite(wxT("http://portableapps.com/apps/utilities/toucan"));
//	info.AddTranslator(wxT("Simeon Kühl - German"));
	info.AddTranslator(wxT("Gowtam Jinnuri - French"));

	wxAboutBox(info);
}void frmMain::OnHELPClick( wxCommandEvent& event )
{	
	//Use win32 method for launching as error with wxShell
	ShellExecute(NULL, wxT("open"), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + _T("\\Help.chm"), NULL, NULL, SW_SHOW);
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_ADD
*/

void frmMain::OnBitmapbuttonSecureAddClick( wxCommandEvent& event )
{	m_ListSecure->Append(m_Tree->GetPath());
}

/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_REMOVE
*/

void frmMain::OnBitmapbuttonSecureRemoveClick( wxCommandEvent& event )
{	unsigned int i ;
	for(i = 0;i <= m_ListSecure->GetCount(); i++)
	{
		if(m_ListSecure->IsSelected(i) == true)
		{
			m_ListSecure->Delete(i);
		}
	}
}
/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_SECURE
*/

void frmMain::OnButtonSecureClick( wxCommandEvent& event )
{	
	if(m_ListSecure->GetCount() != 0)
	{
		//Check passwords are identical
		if(m_Pass->GetValue() == m_RePass->GetValue())
		{

			//Check passsword is longer than or equal to eight characters
			if(m_Pass->GetValue().Length() >= 8)
			{
				unsigned int i;
				wxArrayString arrLocations;
				for(i = 0;i < m_ListSecure->GetCount();i++)
				{
					//wxMessageBox(m_ListSecure->GetString(i));
					arrLocations.Add(m_ListSecure->GetString(i));
				}
				Secure(arrLocations, m_FunctionSecure->GetStringSelection(), m_Pass->GetValue(), true);
			}
			else
			{
				
				wxMessageBox(_("The password must be longer than eight characters"), _("Error"), wxICON_ERROR);
			}
		}
		else
		{
			wxMessageBox(_("The passwords are not the same"), _("Error"), wxICON_ERROR);
		}
	}
	else
	{
		
		
		wxMessageBox(_("You are missing a required field please try again"), _("Error"), wxICON_ERROR);
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_BACKUP
*/

void frmMain::OnButtonBackupClick( wxCommandEvent& event )
{	
	if(m_Backup1->GetValue() != wxEmptyString && m_Backup2->GetValue() != wxEmptyString)
	{
		unsigned int i;
		wxArrayString arrExclusions;
		for(i = 0;i <= m_backup_listex->GetCount(); i++)
		{
			arrExclusions.Add(m_backup_listex->GetString(i));
		}
		//Clears up text file for new exclusions
        wxString strPath = wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxFILE_SEP_PATH + wxT("App") + wxFILE_SEP_PATH + wxT("temp-exclusions.txt");
		PrepareTextFile(strPath);
		//Generate the exclusion file list
		GenerateExclusions(m_Backup1->GetValue(), arrExclusions, true);
		//Cut the beginnings off the files so that they are 7zip compatible
		CutStart(m_Backup1->GetValue(), true);
		//Run the backup
		Backup(m_Backup1->GetValue(), m_Backup2->GetValue(), m_BackupType->GetStringSelection(), m_BackupFormat->GetStringSelection(), m_BackupRatio->GetStringSelection(), true);
	}
	else
	{
		
		wxMessageBox(_("You are missing a required field please try again"), _("Error"), wxICON_ERROR);

	}
}/*!
* wxEVT_COMMAND_RADIOBOX_SELECTED event handler for ID_RADIOBOX_BACKUPTYPE
*/

void frmMain::OnRadioboxBackuptypeSelected( wxCommandEvent& event )
{	
	//Set the correct label depending on what function is selected
	if(m_BackupType->GetStringSelection() == _("Complete"))
	{
		
		m_BackupText1->SetLabel(_("Source Folder"));
		m_BackupText2->SetLabel(_("Backup File"));
		
	}
	else if(m_BackupType->GetStringSelection() == _("Update"))
	{
		
		m_BackupText1->SetLabel(_("Source Folder"));
		m_BackupText2->SetLabel(_("Backup File"));
		
	}
	else if(m_BackupType->GetStringSelection() == _("Restore"))
	{
		
		m_BackupText1->SetLabel(_("Backup File"));
		m_BackupText2->SetLabel(_("Restore Into"));
		
	}

}

/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_BACKUP1
*/

void frmMain::OnButtonBackup1Click( wxCommandEvent& event )
{	
	if(m_BackupText1->GetLabel() == _("Source Folder"))
	{
		
		wxDirDialog dialog(this,_("Please Select the Source Folder."),wxEmptyString);
		if (dialog.ShowModal() == wxID_OK)
		{
			m_Backup1->SetValue(dialog.GetPath());
		}
		
	}
	else if(m_BackupText1->GetLabel() == _("Backup File"))
	{
		
		wxString strFormat = m_BackupFormat->GetStringSelection();
		wxString strCaption = _("Create a Backup File.");
		wxString strWildcard;
		if (strFormat == wxT("Zip"))
		{
			strWildcard = wxT("Zip Files (*.zip)|*.zip");
		}
		else if (strFormat == wxT("7 Zip"))
		{
			strWildcard = wxT("7 Zip (*.7z)|*.7z");
		}
		wxString defaultFilename = wxEmptyString;
		wxString defaultDir = wxT("/");
		wxFileDialog dialog(this, strCaption, defaultDir, defaultFilename, strWildcard, wxSAVE);
		if (dialog.ShowModal() == wxID_OK)
		{
			m_Backup1->SetValue(dialog.GetPath());
		}
		
	}

}

/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_BACKUP2
*/

void frmMain::OnButtonBackup2Click( wxCommandEvent& event )
{	
	if(m_BackupText2->GetLabel() == _("Restore Into"))
	{
		
		wxDirDialog dialog(this,_("Please Select the Folder to Restore Into."),wxEmptyString);
		if (dialog.ShowModal() == wxID_OK)
		{
			m_Backup2->SetValue(dialog.GetPath());
		}
		
	}
	else if(m_BackupText2->GetLabel() == _("Backup File"))
	{
		
		wxString strFormat = m_BackupFormat->GetStringSelection();
		wxString strCaption = _("Create a Backup File.");
		wxString strWildcard;
		if (strFormat == wxT("Zip"))
		{
			strWildcard = wxT("Zip Files (*.zip)|*.zip");
		}
		else if (strFormat == wxT("7 Zip"))
		{
			strWildcard = wxT("7 Zip (*.7z)|*.7z");
		}
		wxFileDialog dialog(this, strCaption, wxT("/"), wxEmptyString, strWildcard, wxSAVE);
		if (dialog.ShowModal() == wxID_OK)
		{
			m_Backup2->SetValue(dialog.GetPath());
		}
		
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_SYNC
*/

void frmMain::OnButtonSyncClick( wxCommandEvent& event )
{	
	if(m_Sync_First->GetValue() != wxEmptyString && m_Sync_Second->GetValue() != wxEmptyString)
	{
		unsigned int i;
		wxArrayString arrExclusions;
		for(i = 0;i <= m_sync_listex->GetCount(); i++)
		{
			arrExclusions.Add(m_sync_listex->GetString(i));
		}
        //wxMessageBox(_("Calling with") + m_Sync_First->GetValue()+ m_Sync_Second->GetValue() + m_Sync_Function->GetStringSelection());
		Sync(m_Sync_First->GetValue(), m_Sync_Second->GetValue() , m_Sync_Function->GetStringSelection(), arrExclusions, true, m_Attribs->IsChecked());
	}
	else
	{
		
		wxMessageBox(_("You are missing a required field please try again"), _("Error"), wxICON_ERROR);

	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_SYNC1
*/

void frmMain::OnButtonSync1Click( wxCommandEvent& event )
{	wxDirDialog dialog(this,_("Please Select the Source Folder"),wxEmptyString);
	if (dialog.ShowModal() == wxID_OK)
	{
		m_Sync_First->SetValue(dialog.GetPath());
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_SYNC2
*/

void frmMain::OnButtonSync2Click( wxCommandEvent& event )
{	wxDirDialog dialog(this,_("Please Select the Destination Folder"),wxEmptyString);
	if (dialog.ShowModal() == wxID_OK)
	{
		m_Sync_Second->SetValue(dialog.GetPath());
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON
*/

void frmMain::OnBitmapbuttonPvaddClick( wxCommandEvent& event )
{	wxTextEntryDialog dialog(this, _("Please enter the name for the new portable variable"), _("New Portable Variable") ,wxEmptyString, wxOK|wxCANCEL);
	if(dialog.ShowModal() == wxID_OK)
	{
		m_List->ClearAll();
		wxListItem column;
		m_List->InsertColumn(0, column);
		m_List->InsertColumn(1, column);
		wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini") );
		wxFileConfig::Set( config );
		
		config->Write(dialog.GetValue() + wxT("/") + wxGetFullHostName() , wxEmptyString);
		config->Write(dialog.GetValue() + wxT("/") + _("Other") , wxEmptyString);
		config->Flush();
		m_PVCombo->Append(dialog.GetValue());
		m_PVCombo->SetStringSelection(dialog.GetValue());
		m_List->InsertItem(0, wxT("Test"));
		m_List->SetItem(0, 0, wxGetFullHostName() );
		m_List->InsertItem(1, wxT("Test"));
		m_List->SetItem(1, 0, _("Other"));

		
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_PVREMOVE
*/

void frmMain::OnBitmapbuttonPvremoveClick( wxCommandEvent& event )
{	//    wxString m_AppDir = wxPathOnly(wxGetApp().GetDirectory());
	wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini") );
	wxFileConfig::Set( config );
	config->DeleteGroup(m_PVCombo->GetValue());
	config->Flush();
	m_PVCombo->SetValue(wxEmptyString);
	m_PVCombo->Delete(m_PVCombo->GetSelection());
	m_List->ClearAll();
	wxListItem column;
	m_List->InsertColumn(0, column);
	m_List->InsertColumn(1, column);
}/*!
* wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX
*/

void frmMain::OnComboboxSelected( wxCommandEvent& event )
{	
	wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini") );
	wxFileConfig::Set( config );
	wxTextFile file;
	m_List->DeleteAllItems();
	file.Open(wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini"));
	unsigned int i;
	//for each line in the file
	for(i = 0; i < file.GetLineCount(); i++)
	{
		wxString strLine = file.GetLine(i);
		wxString strSelected = wxT("[") + m_PVCombo->GetValue() + wxT("]");
		unsigned int o;
		wxString strNew;
		//Replace any \ characters with nothing
		for(o = 0; o < strLine.Length(); o++)
		{
			wxString strSub = strLine.Mid(o, 1);
			if(strSub == wxT("\\"))
			{
				strNew += wxT("");
			}
			else
			{
				strNew = strNew + strSub;
			}
		}
		strLine = strNew;
		if(strLine == strSelected)
		{
			unsigned int j;
			for(j = i + 1; j < file.GetLineCount(); j++)
			{
				wxString strLine = file.GetLine(j);
				if(strLine.Left(1) == wxT("["))
				{
					goto end;
				}
				else
				{
					unsigned int m;
					unsigned int n;
					wxString strSecondLine = file.GetLine(j);
					
					//Find the position of the equals in the line and call it n
					for(m = 0; m < strSecondLine.Length(); m++)
					{
						wxString substring = strSecondLine.Mid(m, 1);
						if(substring == wxT("="))
						{
							n = m;
						}
					}
					int k = m_List->GetItemCount();
					m_List->InsertItem(k, wxT("Test"));
					m_List->SetItem(k, 0, strSecondLine.Left(n) );
					m_List->SetItem(k, 1, strSecondLine.Mid(n + 1, strSecondLine.Length() - n));

				}
				
			}
		}
	}
end:
	bool finished = true;
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_PVADDLIST
*/

void frmMain::OnBitmapbuttonPvaddlistClick( wxCommandEvent& event )
{	
	int j = m_List->GetItemCount();
	m_List->InsertItem(j, wxT("Test"));
	m_List->SetItem(j, 0, wxGetFullHostName() );
	wxString caption = _("Choose a directory");
	wxString wildcard = _("All Files (*.*)|*.*");
	wxString defaultFilename = wxEmptyString;
	wxString defaultDir = wxT("/");
	wxString strPath;
	wxDirDialog dialog(this, caption, defaultDir);
	if (dialog.ShowModal() == wxID_OK)
	{
		m_List->SetItem(j, 1, dialog.GetPath());
	}
	else
	{
		m_List->SetItem(j, 1, wxEmptyString);
	}
	wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini") );
	wxFileConfig::Set( config );
	config->Write(m_PVCombo->GetValue() + wxT("/") + wxGetFullHostName() , dialog.GetPath());
	config->Flush();
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_PVREMOVELIST
*/

void frmMain::OnBitmapbuttonPvremovelistClick( wxCommandEvent& event )
{	wxString selected;
	long item = -1;
	for ( ;; )
	{
		item = m_List->GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
		if ( item == -1 )
		break;
		selected = m_List->GetItemText(item);
		m_List->DeleteItem(item);
		//m_List->SetItemState(item, wxLIST_STATE_SELECTED,wxLIST_STATE_SELECTED);
	}
	wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini") );
	wxFileConfig::Set( config );
	config->DeleteEntry(m_PVCombo->GetValue() + wxT("/") + selected);
	config->Flush();
}/*!
* wxEVT_COMMAND_LIST_ITEM_ACTIVATED event handler for ID_LISTCTRL
*/

void frmMain::OnListctrlItemActivated( wxListEvent& event )
{	long item = -1;
	for ( ;; )
	{
		item = m_List->GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
		if ( item == -1 )
		break;
		
		wxListItem PreviousColumn1;
		PreviousColumn1.m_itemId = item;
		PreviousColumn1.m_col = 1;
		PreviousColumn1.m_mask = wxLIST_MASK_TEXT;
		m_List->GetItem(PreviousColumn1);
		wxString strPreviousColumn1 = PreviousColumn1.m_text;
		wxTextEntryDialog location(this, _("Please insert the location you want to point to."), _("Location"), strPreviousColumn1, wxOK);
		
		if(location.ShowModal() == wxID_OK)
		{
			m_List->SetItem(item , 1, location.GetValue());
		}
		m_List->SetColumnWidth(0, -1);
		m_List->SetColumnWidth(1, -1);
		wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Variables.ini") );
		wxFileConfig::Set( config );
		config->Write(m_PVCombo->GetValue() + wxT("/") + m_List->GetItemText(item), location.GetValue());
		config->Flush();
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SECURE_MAKERELATIVE
*/

void frmMain::OnBitmapbuttonSecureMakerelativeClick( wxCommandEvent& event )
{	unsigned int i ;
	for(i = 0;i <= m_ListSecure->GetCount(); i++)
	{
		if(m_ListSecure->IsSelected(i) == true)
		{
			if(m_ListSecure->GetString(i).Left(7) == wxT("@drive@"))
			{
			}
			else if(m_ListSecure->GetString(i).Left(1) == wxT("@"))
			{
				wxString strSelection = m_ListSecure->GetString(i);
				strSelection = wxT("@drive@\\") + strSelection;
				m_ListSecure->SetString(i, strSelection);
			}
			else
			{
				wxString strSelection = m_ListSecure->GetString(i);
				strSelection = wxT("@drive@") + strSelection.Right(strSelection.Length() - 2);
				m_ListSecure->SetString(i, strSelection);
			}
		}
	}

}

/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SYNC_ADDVAR
*/

void frmMain::OnBitmapbuttonSyncAddvar1Click( wxCommandEvent& event )
{	frmVariable* window = new frmVariable(this, ID_FRMINSERT, _("Insert Variable"));
	if(window->ShowModal() == wxID_OK)
	{
		wxString strSelected = wxGetApp().GetStrTemp();
		m_Sync_First->SetValue(wxT("@") + strSelected + wxT("@"));
	}

}

/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_BACKUP_ADDVAR1
*/

void frmMain::OnBitmapbuttonBackupAddvar1Click( wxCommandEvent& event )
{	frmVariable* window = new frmVariable(this, ID_FRMINSERT, _("Insert Variable"));
	if(window->ShowModal() == wxID_OK)
	{
		wxString strSelected = wxGetApp().GetStrTemp();
		m_Backup1->SetValue(wxT("@") + strSelected + wxT("@"));
	} }

/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_BACKUP_ADDVAR2
*/

void frmMain::OnBitmapbuttonBackupAddvar2Click( wxCommandEvent& event )
{	frmVariable* window = new frmVariable(this, ID_FRMINSERT, _("Insert Variable"));
	if(window->ShowModal() == wxID_OK)
	{
		wxString strSelected = wxGetApp().GetStrTemp();
		m_Backup2->SetValue(wxT("@") + strSelected + wxT("@"));
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SYNC_ADDVAR2
*/

void frmMain::OnBitmapbuttonSyncAddvar2Click( wxCommandEvent& event )
{	frmVariable* window = new frmVariable(this, ID_FRMINSERT, _("Insert Variable"));
	if(window->ShowModal() == wxID_OK)
	{
		wxString strSelected = wxGetApp().GetStrTemp();
		m_Sync_Second->SetValue(wxT("@") + strSelected + wxT("@"));
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SECURE_ADDVAR
*/

void frmMain::OnBitmapbuttonSecureAddvarClick( wxCommandEvent& event )
{	frmVariable* window = new frmVariable(this, ID_FRMINSERT, _("Insert Variable"));
	if(window->ShowModal() == wxID_OK)
	{
        wxString strSelected = wxGetApp().GetStrTemp();
		m_ListSecure->Append(wxT("@") + strSelected + wxT("@"));
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SYNC_ADDEX
*/
void frmMain::OnBitmapbuttonSyncAddexClick( wxCommandEvent& event )
{	wxTextEntryDialog exclusion(this, _("Please insert the folder name or extension \nthat you want to exclude."), _("Folder or Extension"), wxEmptyString, wxOK);
	if(exclusion.ShowModal() == wxID_OK && exclusion.GetValue() != wxEmptyString)
	{
		m_sync_listex->Append(exclusion.GetValue());
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SYNC_REMOVEEX
*/

void frmMain::OnBitmapbuttonSyncRemoveexClick( wxCommandEvent& event )
{	m_sync_listex->Delete(m_sync_listex->GetSelection());
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_BACKUPEXADD
*/

void frmMain::OnBitmapbuttonBackupexaddClick( wxCommandEvent& event )
{	wxTextEntryDialog exclusion(this, _("Please insert the folder name or extension \nthat you want to exclude."), _("Folder or Extension"), wxEmptyString, wxOK);
	if(exclusion.ShowModal() == wxID_OK && exclusion.GetValue() != wxEmptyString)
	{
		m_backup_listex->Append(exclusion.GetValue());
	}
}/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_BACKUPEXREM
*/

void frmMain::OnBitmapbuttonBackupexremClick( wxCommandEvent& event )
{	m_backup_listex->Delete(m_backup_listex->GetSelection());
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SYNC_SAVE
 */

void frmMain::OnBitmapbuttonSyncSaveClick( wxCommandEvent& event )
{
    wxGetApp().SetStrTemp(_T("Sync"));
    frmSave* window = new frmSave(this, ID_FRMSAVE, _("Save"));
	if(window->ShowModal() == wxID_OK)
	{
        wxString strName = wxGetApp().GetStrTemp();
        wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Jobs.ini") );
        wxFileConfig::Set( config );
        config->DeleteGroup(strName);
        config->Write(strName+ wxT("/Type"), _T("Sync"));
        config->Write(strName+ wxT("/1"), m_Sync_First->GetValue());
        config->Write(strName+ wxT("/2"), m_Sync_Second->GetValue());
        config->Write(strName+ wxT("/Function"), m_Sync_Function->GetStringSelection());
        config->Write(strName+ wxT("/Attributes"), m_Attribs->IsChecked());
        int i;
        wxString strExsisting;
        for(i = 0; i  < m_sync_listex->GetCount(); i++)
        {
                //wxMessageBox(_("Entering"));
            strExsisting = config->Read(strName+ wxT("/Exclusions"), wxEmptyString);
                //wxMessageBox(strExsisting);
                config->Write(strName+ wxT("/Exclusions"), strExsisting + wxT("|") + m_sync_listex->GetString(i));
                config->Flush();
        }
        strExsisting = config->Read(strName+ wxT("/Exclusions"), wxEmptyString);
        config->Write(strName+ wxT("/Exclusions"), strExsisting + wxT("|"));
        config->Flush();
        	//config->Write(m_PVCombo->GetValue() + wxT("/") + m_List->GetItemText(item), location.GetValue());
        
	}
}

/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SYNC_OPEN
*/

void frmMain::OnBitmapbuttonSyncOpenClick( wxCommandEvent& event )
{
    wxGetApp().SetStrTemp(_T("Sync"));	
    wxString caption = _("Open Settings");
    frmOpen* window = new frmOpen(this, ID_FRMOPEN, _("Open"));
    if(window->ShowModal() == wxID_OK)
    {
        m_sync_listex->Clear();
        wxString strName = wxGetApp().GetStrTemp();
        wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Jobs.ini") );
        wxFileConfig::Set( config );
        m_Sync_First->SetValue(config->Read(strName+ wxT("/1")));
        m_Sync_Second->SetValue(config->Read(strName+ wxT("/2")));
        m_Sync_Function->SetStringSelection(config->Read(strName+ wxT("/Function")));
        
        wxString strAttribs = config->Read(strName+ wxT("/Attributes"));
        if(strAttribs == wxT("0"))
        {
            m_Attribs->SetValue(false);
        }
        else if(strAttribs == wxT("1"))
        {
            m_Attribs->SetValue(true);
        }
        
        wxString strToSplit = config->Read(strName+ wxT("/Exclusions"));
        wxStringTokenizer tkz(strToSplit, wxT("|"), wxTOKEN_STRTOK);
        wxString token;
        while ( tkz.HasMoreTokens() )
        {
            token = tkz.GetNextToken();
            m_sync_listex->Append(token);
        
        }
    }
}
/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_BACKUP_SAVE
*/

void frmMain::OnBitmapbuttonBackupSaveClick( wxCommandEvent& event )
{	 
    wxGetApp().SetStrTemp(wxT("Backup"));
    frmSave* window = new frmSave(this, ID_FRMSAVE, _("Save"));
	if(window->ShowModal() == wxID_OK)
	{
        wxString strName = wxGetApp().GetStrTemp();
        wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Jobs.ini") );
        wxFileConfig::Set( config );
        config->DeleteGroup(strName);
        config->Write(strName+ wxT("/Type"), wxT("Backup"));
        config->Write(strName+ wxT("/1"), m_Backup1->GetValue());
        config->Write(strName+ wxT("/2"), m_Backup2->GetValue());
        config->Write(strName+ wxT("/Function"), m_BackupType->GetStringSelection());
        config->Write(strName+ wxT("/Format"), m_BackupFormat->GetStringSelection());
        config->Write(strName+ wxT("/Ratio"), m_BackupRatio->GetStringSelection());
        int i;
        wxString strExsisting;
        for(i = 0; i  < m_backup_listex->GetCount(); i++)
        {
            strExsisting = config->Read(strName+ wxT("/Exclusions"), wxEmptyString);
            config->Write(strName+ wxT("/Exclusions"), strExsisting + wxT("|") + m_backup_listex->GetString(i));
            config->Flush();
        }
        strExsisting = config->Read(strName+ wxT("/Exclusions"), wxEmptyString);
        config->Write(strName+ wxT("/Exclusions"), strExsisting + wxT("|"));
        config->Flush();
        	//config->Write(m_PVCombo->GetValue() + wxT("/") + m_List->GetItemText(item), location.GetValue());
        
	}
}
/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_BACKUP_OPEN
*/

void frmMain::OnBitmapbuttonBackupOpenClick( wxCommandEvent& event )
{	    
    wxGetApp().SetStrTemp(wxT("Backup"));	
    wxString caption = _("Open Settings");
    frmOpen* window = new frmOpen(this, ID_FRMOPEN, _("Open"));
    if(window->ShowModal() == wxID_OK)
    {
        m_backup_listex->Clear();
        wxString strName = wxGetApp().GetStrTemp();
        wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Jobs.ini") );
        wxFileConfig::Set( config );
        m_Backup1->SetValue(config->Read(strName+ wxT("/1")));
        m_Backup2->SetValue(config->Read(strName+ wxT("/2")));
        m_BackupType->SetStringSelection(config->Read(strName+ wxT("/Function")));
        m_BackupFormat->SetStringSelection(config->Read(strName+ wxT("/Format")));
        m_BackupRatio->SetStringSelection(config->Read(strName+ wxT("/Ratio")));
        
        wxString strToSplit = config->Read(strName+ wxT("/Exclusions"));
        wxStringTokenizer tkz(strToSplit, wxT("|"), wxTOKEN_STRTOK);
        wxString token;
        while ( tkz.HasMoreTokens() )
        {
            token = tkz.GetNextToken();
            m_backup_listex->Append(token);
        
        }
        if(m_BackupType->GetStringSelection() == _("Complete"))
        {
            
            m_BackupText1->SetLabel(_("Source Folder"));
            m_BackupText2->SetLabel(_("Backup File"));
            
        }
        else if(m_BackupType->GetStringSelection() == _("Update"))
        {
            
            m_BackupText1->SetLabel(_("Source Folder"));
            m_BackupText2->SetLabel(_("Backup File"));
            
        }
        else if(m_BackupType->GetStringSelection() == _("Restore"))
        {
            
            m_BackupText1->SetLabel(_("Backup File"));
            m_BackupText2->SetLabel(_("Restore Into"));
            
        }

    }
}
/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_SAVE
*/

void frmMain::OnBitmapbuttonSecureSaveClick( wxCommandEvent& event )
{	
    wxGetApp().SetStrTemp(wxT("Secure"));	
    wxString caption = _("Open Settings");
    frmSave* window = new frmSave(this, ID_FRMOPEN, _("Open"));
    if(window->ShowModal() == wxID_OK)
    {
        wxString strName = wxGetApp().GetStrTemp();
        wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Jobs.ini") );
        wxFileConfig::Set( config );
        config->DeleteGroup(strName);
        config->Write(strName+ wxT("/Type"), wxT("Secure"));
        config->Write(strName+ wxT("/Function"), m_FunctionSecure->GetStringSelection());
        int i;
        wxString strExsisting;
        for(i = 0; i  < m_ListSecure->GetCount(); i++)
        {
            strExsisting = config->Read(strName+ wxT("/Files"), wxEmptyString);
            config->Write(strName+ wxT("/Files"), strExsisting + wxT("|") + m_ListSecure->GetString(i));
            config->Flush();
        }
        strExsisting = config->Read(strName+ wxT("/Files"), wxEmptyString);
        config->Write(strName+ wxT("/Files"), strExsisting + wxT("|"));
        config->Flush(); 
    }

	
}
/*!
* wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BITMAPBUTTON_OPEN
*/

void frmMain::OnBitmapbuttonSecureOpenClick( wxCommandEvent& event )
{	
    wxGetApp().SetStrTemp(wxT("Secure"));	
    wxString caption = _("Open Settings");
    frmOpen* window = new frmOpen(this, ID_FRMOPEN, _("Open"));
    if(window->ShowModal() == wxID_OK)
    {
        m_ListSecure->Clear();
        wxString strName = wxGetApp().GetStrTemp();
        wxFileConfig *config = new wxFileConfig( wxT(""), wxT(""), wxPathOnly(wxStandardPaths::Get().GetExecutablePath()) + wxT("\\Data\\Jobs.ini") );
        wxFileConfig::Set( config );
        m_FunctionSecure->SetStringSelection(config->Read(strName+ wxT("/Function")));
        
        wxString strToSplit = config->Read(strName+ wxT("/Files"));
        wxStringTokenizer tkz(strToSplit, wxT("|"), wxTOKEN_STRTOK);
        wxString token;
        while ( tkz.HasMoreTokens() )
        {
            token = tkz.GetNextToken();
            m_ListSecure->Append(token);
        
        }
    }
}
